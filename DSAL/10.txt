#include<iostream>
#include<queue>
using namespace std;
int main(){
queue<string> pt;
queue<string> pr;
string name;
int n,ch,p;
while(1){
cout<<"\n1. Add patient";
cout<<"\n2. Show patients";
cout<<"\n3. Delete patients";
cout<<"\n4. Exit";
cout<<"\nEnter your choice - ";
cin>>ch;
switch (ch)
{
case 1: cout<<"Enter no of patients - ";
cin>>n;
for (int i=0; i<n; i++){
cout<<"\nEnter name of patient - ";
cin>>name;
pt.push(name);
cout<<"( 1-Serious; 2-Non Serious; 3-General checkup )";
cout<<"\nEnter priority - ";
cin>>p;
switch (p)
{
case 1:
pr.push("SERIOUS");
break;
case 2:
pr.push("NON-SERIOUS");
break;
case 3:
pr.push("CHECKUP");
break;
default:
break;
}
}
break;
case 2 : if(pt.empty())
cout<<"\nQueue is empty !\n";
else
while(!pt.empty()){
cout<<"\nPatient name : "<<pt.front();
pt.pop();
cout<<" - "<<pr.front();
pr.pop();
}
cout<<"\n";
break;
case 3: if(pt.empty())
cout<<"\nQueue is empty !\n";
else
pt.pop();
pr.pop();
break;
case 4: exit(1);
default: cout<<"\nInvalid choice !\n\n";
break;
}
}
}







#include <iostream>
#include <queue>
#include <limits> // For input validation

using namespace std;

enum Priority { SERIOUS, NON_SERIOUS, CHECKUP };

struct Patient {
    string name;
    Priority priority;
};

void clearInputBuffer() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void displayQueue(queue<Patient> q) {
    int position = 1;
    while (!q.empty()) {
        Patient p = q.front();
        string priorityStr;
        switch(p.priority) {
            case SERIOUS: priorityStr = "SERIOUS"; break;
            case NON_SERIOUS: priorityStr = "NON-SERIOUS"; break;
            case CHECKUP: priorityStr = "GENERAL CHECKUP"; break;
        }
        cout << position++ << ". " << p.name 
             << " - " << priorityStr << endl;
        q.pop();
    }
}

int main() {
    queue<Patient> patientQueue;
    int choice;
    
    while(true) {
        cout << "\n===== Patient Management System =====\n"
             << "1. Add Patient\n"
             << "2. Show All Patients\n"
             << "3. Process Next Patient\n"
             << "4. Exit\n"
             << "Enter your choice: ";
        
        if (!(cin >> choice)) {
            clearInputBuffer();
            cout << "Invalid input! Please enter a number (1-4).\n";
            continue;
        }

        switch(choice) {
            case 1: {
                int numPatients;
                cout << "Enter number of patients to add: ";
                while (!(cin >> numPatients) || numPatients <= 0) {
                    clearInputBuffer();
                    cout << "Invalid input! Enter a positive number: ";
                }

                for (int i = 0; i < numPatients; ++i) {
                    Patient newPatient;
                    cout << "\nPatient #" << i+1 << endl;
                    cout << "Enter name: ";
                    cin >> newPatient.name;

                    int priority;
                    cout << "Priority (1-Serious, 2-Non-Serious, 3-General Checkup): ";
                    while (!(cin >> priority) || priority < 1 || priority > 3) {
                        clearInputBuffer();
                        cout << "Invalid priority! Enter 1-3: ";
                    }

                    switch(priority) {
                        case 1: newPatient.priority = SERIOUS; break;
                        case 2: newPatient.priority = NON_SERIOUS; break;
                        case 3: newPatient.priority = CHECKUP; break;
                    }
                    patientQueue.push(newPatient);
                }
                break;
            }

            case 2:
                if (patientQueue.empty()) {
                    cout << "\nNo patients in queue!\n";
                } else {
                    cout << "\nCurrent Patient Queue:\n";
                    displayQueue(patientQueue);
                }
                break;

            case 3:
                if (patientQueue.empty()) {
                    cout << "\nQueue is empty!\n";
                } else {
                    Patient next = patientQueue.front();
                    cout << "\nProcessing patient: " << next.name << endl;
                    patientQueue.pop();
                }
                break;

            case 4:
                cout << "\nExiting system...\n";
                return 0;

            default:
                cout << "\nInvalid choice! Please enter 1-4.\n";
                break;
        }
    }
    return 0;
}
