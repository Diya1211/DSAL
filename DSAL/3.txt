#include<iostream>
using namespace std;

struct node {
    node *left;
    int data;
    node *right;
};

class BST {
    public:
    node *root;
    BST() { root = NULL; }
    
    void create();
    void insert(node*, node*);
    void mirror(node*);
    void search(node*, int);
    void Inorder(node*);
    void Preorder(node*);
    void Postorder(node*);
    int min(node*);
    int nodes_lp(node*);
};

void BST::create() {
    node *temp = new node();
    cout << "Enter data: ";
    cin >> temp->data;
    temp->left = temp->right = NULL;
    
    if(root == NULL) root = temp;
    else insert(root, temp);
}

void BST::insert(node *root, node *temp) {
    if(temp->data < root->data) {
        if(root->left == NULL) root->left = temp;
        else insert(root->left, temp);
    }
    else {
        if(root->right == NULL) root->right = temp;
        else insert(root->right, temp);
    }
}

int BST::nodes_lp(node *root) {
    if(root == NULL) return 0;
    return max(nodes_lp(root->left), nodes_lp(root->right)) + 1;
}

int BST::min(node *root) {
    if(root->left == NULL) return root->data;
    return min(root->left);
}

void BST::mirror(node *root) {
    if(root == NULL) return;
    mirror(root->left);
    mirror(root->right);
    swap(root->left, root->right);
}

void BST::search(node *root, int key) {
    if(root == NULL) {
        cout << "Not found!" << endl;
        return;
    }
    
    if(key < root->data) search(root->left, key);
    else if(key > root->data) search(root->right, key);
    else cout << "Found!" << endl;
}

void BST::Inorder(node *temp) {
    if(temp != NULL) {
        Inorder(temp->left);
        cout << temp->data << " ";
        Inorder(temp->right);
    }
}

void BST::Preorder(node *temp) {
    if(temp != NULL) {
        cout << temp->data << " ";
        Preorder(temp->left);
        Preorder(temp->right);
    }
}

void BST::Postorder(node *temp) {
    if(temp != NULL) {
        Postorder(temp->left);
        Postorder(temp->right);
        cout << temp->data << " ";
    }
}

int main() {
    BST B;
    int ch, n;
    
    // Initial tree creation
    do {
        B.create();
        cout << "Add more nodes? (1/0): ";
        cin >> ch;
    } while(ch == 1);

    while(true) {
        cout << "\n1. Add Node\n2. No. of nodes in longest path\n3. Minimum Value"
             << "\n4. Mirror Tree\n5. Search\n6. Inorder\n7. Preorder"
             << "\n8. Postorder\n9. Exit\nChoice: ";
        cin >> ch;
        
        switch(ch) {
            case 1: 
                B.create();
                break;
                
            case 2:
                cout << "Longest path nodes: " << B.nodes_lp(B.root) << endl;
                break;
                
            case 3:
                cout << "Minimum value: " << B.min(B.root) << endl;
                break;
                
            case 4:
                B.mirror(B.root);
                cout << "Tree mirrored!" << endl;
                break;
                
            case 5:
                cout << "Enter search key: ";
                cin >> n;
                B.search(B.root, n);
                break;
                
            case 6:
                cout << "Inorder: ";
                B.Inorder(B.root);
                cout << endl;
                break;
                
            case 7:
                cout << "Preorder: ";
                B.Preorder(B.root);
                cout << endl;
                break;
                
            case 8:
                cout << "Postorder: ";
                B.Postorder(B.root);
                cout << endl;
                break;
                
            case 9:
                exit(0);
                
            default:
                cout << "Invalid choice!" << endl;
        }
    }
    return 0;
}
